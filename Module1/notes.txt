
Bubble Sort

Algorithm:

Start with an unsorted array of n elements.

Repeat the following steps for n-1 iterations:

For each iteration, compare adjacent elements in the array.

If the current element is greater than the next element, swap them.

After each iteration, the largest unsorted element will "bubble up" to its correct position.

The array is now sorted.


BubbleSort(arr[], n):
    for i from 0 to n-1:
        for j from 0 to n-i-1:
            if arr[j] > arr[j+1]:
                swap(arr[j], arr[j+1])


----------------

Linear Search
Algorithm:
Start with an array of n elements and a target value.

Iterate through the array from the first element to the last:

If the current element matches the target, return its index.

If the target is not found, return -1.

LinearSearch(arr[], n, target):
    for i from 0 to n-1:
        if arr[i] == target:
            return i
    return -1


-------------------

Binary Search
Algorithm:
Start with a sorted array of n elements and a target value.

Initialize two pointers: left (start of the array) and right (end of the array).

Repeat the following steps while left <= right:

Calculate the middle index: mid = left + (right - left) / 2.

If the middle element equals the target, return the index.

If the middle element is less than the target, move the left pointer to mid + 1.

If the middle element is greater than the target, move the right pointer to mid - 1.

If the target is not found, return -1.

BinarySearch(arr[], n, target):
    left = 0
    right = n - 1
    while left <= right:
        mid = left + (right - left) / 2
        if arr[mid] == target:
            return mid
        else if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

